// Mocks generated by Mockito 5.3.2 from annotations
// in restaurant/test/services/restaurant_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:dio/dio.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:restaurant/data/api/restaurant/restaurant_service.dart' as _i4;
import 'package:restaurant/data/model/error_model.dart' as _i3;
import 'package:restaurant/data/model/restaurant_model.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRestaurantListResponse_0 extends _i1.SmartFake
    implements _i2.RestaurantListResponse {
  _FakeRestaurantListResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRestaurantDetailResponse_1 extends _i1.SmartFake
    implements _i2.RestaurantDetailResponse {
  _FakeRestaurantDetailResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePostAReviewResponse_2 extends _i1.SmartFake
    implements _i2.PostAReviewResponse {
  _FakePostAReviewResponse_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeErrorResponse_3 extends _i1.SmartFake implements _i3.ErrorResponse {
  _FakeErrorResponse_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RestaurantService].
///
/// See the documentation for Mockito's code generation for more information.
class MockRestaurantService extends _i1.Mock implements _i4.RestaurantService {
  @override
  String get baseUrl => (super.noSuchMethod(
        Invocation.getter(#baseUrl),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  set dio(_i5.Dio? _dio) => super.noSuchMethod(
        Invocation.setter(
          #dio,
          _dio,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i6.Future<_i2.RestaurantListResponse> getRestaurants({
    bool? isSearching = false,
    String? searchKeyword,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRestaurants,
          [],
          {
            #isSearching: isSearching,
            #searchKeyword: searchKeyword,
          },
        ),
        returnValue: _i6.Future<_i2.RestaurantListResponse>.value(
            _FakeRestaurantListResponse_0(
          this,
          Invocation.method(
            #getRestaurants,
            [],
            {
              #isSearching: isSearching,
              #searchKeyword: searchKeyword,
            },
          ),
        )),
        returnValueForMissingStub: _i6.Future<_i2.RestaurantListResponse>.value(
            _FakeRestaurantListResponse_0(
          this,
          Invocation.method(
            #getRestaurants,
            [],
            {
              #isSearching: isSearching,
              #searchKeyword: searchKeyword,
            },
          ),
        )),
      ) as _i6.Future<_i2.RestaurantListResponse>);
  @override
  _i6.Future<_i2.RestaurantDetailResponse> getDetailRestaurant(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDetailRestaurant,
          [id],
        ),
        returnValue: _i6.Future<_i2.RestaurantDetailResponse>.value(
            _FakeRestaurantDetailResponse_1(
          this,
          Invocation.method(
            #getDetailRestaurant,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i2.RestaurantDetailResponse>.value(
                _FakeRestaurantDetailResponse_1(
          this,
          Invocation.method(
            #getDetailRestaurant,
            [id],
          ),
        )),
      ) as _i6.Future<_i2.RestaurantDetailResponse>);
  @override
  _i6.Future<_i2.PostAReviewResponse> postAReview(dynamic body) =>
      (super.noSuchMethod(
        Invocation.method(
          #postAReview,
          [body],
        ),
        returnValue: _i6.Future<_i2.PostAReviewResponse>.value(
            _FakePostAReviewResponse_2(
          this,
          Invocation.method(
            #postAReview,
            [body],
          ),
        )),
        returnValueForMissingStub: _i6.Future<_i2.PostAReviewResponse>.value(
            _FakePostAReviewResponse_2(
          this,
          Invocation.method(
            #postAReview,
            [body],
          ),
        )),
      ) as _i6.Future<_i2.PostAReviewResponse>);
  @override
  _i6.Future<dynamic> post<T>(
    String? path,
    dynamic body,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [
            path,
            body,
          ],
        ),
        returnValue: _i6.Future<dynamic>.value(),
        returnValueForMissingStub: _i6.Future<dynamic>.value(),
      ) as _i6.Future<dynamic>);
  @override
  _i6.Future<dynamic> get<T>(
    String? path, {
    dynamic query,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [path],
          {#query: query},
        ),
        returnValue: _i6.Future<dynamic>.value(),
        returnValueForMissingStub: _i6.Future<dynamic>.value(),
      ) as _i6.Future<dynamic>);
  @override
  _i3.ErrorResponse handleError(_i5.DioError? e) => (super.noSuchMethod(
        Invocation.method(
          #handleError,
          [e],
        ),
        returnValue: _FakeErrorResponse_3(
          this,
          Invocation.method(
            #handleError,
            [e],
          ),
        ),
        returnValueForMissingStub: _FakeErrorResponse_3(
          this,
          Invocation.method(
            #handleError,
            [e],
          ),
        ),
      ) as _i3.ErrorResponse);
}
